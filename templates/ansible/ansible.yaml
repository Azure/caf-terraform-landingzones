- name: Process deployment based on ignite.yaml
  hosts: localhost

  tasks:

    - name: "Set variables"
      set_fact:
        job_cache_base_path: "/home/vscode/.terraform.cache"
        destination_base_path: '{{ platform_configuration_folder }}'
        resource_template_folder: "{{ public_templates_folder }}/resources"
        platform_service_folder: "{{ public_templates_folder }}/platform/services"

    - name: "load {{ template_folder | default(platform_definition_folder)}}/ignite.yaml"
      include_vars:
        name: bootstrap
        dir: "{{ template_folder | default(platform_definition_folder)}}"
        depth: 1
        ignore_unknown_extensions: true
        files_matching: "ignite.yaml"

    - name: "load _variables files"
      include_vars:
        name: variables
        dir: "{{ template_folder | default(platform_service_folder)}}"
        depth: 1
        ignore_unknown_extensions: true
        files_matching: "_variables"

    - name: "Load variable for {{deployment_mode}} config from {{definition_folder}}"
      include_vars:
        name: asvm_resource__to_merge
        dir: "{{definition_folder | default(platform_definition_folder)}}"
        depth: 0
        # ignore_unknown_extensions: true
        files_matching: ".yaml"
      when: deployment_mode == 'asvm'

    - name: "Load variable for ignite.yaml config from {{platform_definition_folder}}"
      include_vars:
        name: ignite_resource__to_merge
        dir: "{{platform_definition_folder}}"
        depth: 0
        files_matching: "ignite.yaml"
      when: deployment_mode == 'asvm'

    - name: "Load variable for tfstates.yaml config from {{platform_definition_folder}}"
      include_vars:
        name: tfstates_resource__to_merge
        dir: "{{platform_definition_folder}}"
        depth: 0
        files_matching: "tfstates.yaml"
      when: deployment_mode == 'asvm'

    - find:
        paths: "{{definition_folder | default(platform_definition_folder)}}"
        recurse: yes
        patterns: "*.yaml"
        file_type: file
        excludes: "*.caf.platform.yaml"
      register: yaml_files_to_process
      when: deployment_mode == 'platform'


    - name: load variables
      set_fact:
        "{{item.path | basename | regex_replace('.yaml$', '')}}_resource__to_merge": "{{ lookup('template', item.path )}}"
      with_items: "{{yaml_files_to_process.files}}"
      when: deployment_mode == 'platform'

    - name: load variables
      set_fact:
        merged_resources: "{{ merged_resources | default({}) | combine( lookup('template', item.path ) | from_yaml )}}"
      with_items: "{{yaml_files_to_process.files}}"
      when: deployment_mode == 'platform'

    - set_fact:
        resources:  "{{ merged_resources }}"

    - name: "Creates destination directory - {{destination_base_path}}"
      file:
        path: "{{destination_base_path}}"
        state: directory

    - name: "Creates cache directory"
      file:
        path: "{{ job_cache_base_path }}/launchpad"
        state: directory

    - debug:
        msg: 
        - "bootstrap: {{bootstrap}}"
        - "resources: {{resources}}"

#
# Generate the foundation services
#

    - name: Process core deployments
      include_tasks: "process_regions.yaml"
      loop: "{{bootstrap.deployments[deployment_mode].root.keys()}}"
      loop_control:
        loop_var: region
      vars:
        lz_type: "{{deployment_mode}}"
        stage: root

    - name: Process alz deployments
      include_tasks: "process_regions.yaml"
      loop: "{{bootstrap.deployments[deployment_mode].alz.keys()}}"
      loop_control:
        loop_var: region
      when:
        - bootstrap.deployments[deployment_mode].alz is defined and launchpad_tfstate_exists.rc == 0
      vars:
        lz_type: "{{deployment_mode}}"
        stage: alz

#
# Process the deployments folders
#

    - find:
        paths: "{{definition_folder | default(platform_definition_folder)}}/scale_out_domains"
        recurse: yes
        patterns: "*.yaml"
        file_type: file
      register: files_to_process

    - name: "Process deployments"
      include_tasks: "process_regions.yaml"
      loop: "{{bootstrap.deployments[deployment_mode].scale_out_domains.keys()}}"
      loop_control:
        loop_var: region
      when:
        - bootstrap.deployments[deployment_mode].scale_out_domains is defined
        - (launchpad_tfstate_exists is defined and launchpad_tfstate_exists.rc == 0) or (storage_account_level3 is defined and storage_account_level3.rc == 0)
      vars:
        lz_type: "{{deployment_mode}}"
        stage: scale_out_domains
      

#
# Formatting & Linters
#

    - name: Terraform Formatting
      shell: |
        terraform fmt -recursive {{ destination_base_path }}
