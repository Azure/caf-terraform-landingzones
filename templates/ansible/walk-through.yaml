#
# Get launchpad subscription details
#

- name: Get deployment user object_id (make sure you are logged-in to the launchpad Azure subscription first.)
  shell: az ad signed-in-user show --query id -o tsv
  register: bash_object_id
  when: AZURE_OBJECT_ID is undefined

- name: Get deployment user UPN
  shell: az ad signed-in-user show --query userPrincipalName -o tsv
  register: bash_upn
  when: upn_owner is not defined

- name: Get default user's tenant name
  shell: az rest --method get --url "https://graph.microsoft.com/v1.0/organization" --query "value[0].verifiedDomains[?isDefault].name" -o tsv
  register: bash_tenant_name
  when: tenant_name is not defined
  
- name: Get default user's tenant guid
  shell: az account show --query tenantId -o tsv
  register: tenant_id
  
- name: Get default subscription id
  shell: az account show --query id -o tsv
  register: subscription_id
  
- name: Get default subscription name
  shell: az account show --query name -o tsv
  register: subscription_name
  
- name: Get public ip address for bootstrap whitelisting
  shell: dig @resolver1.opendns.com A myip.opendns.com +short -4
  register: public_ip

- set_fact:
    regions:  "{{ azure_regions }}"
    deployment_mode: "platform"
    object_id: "{{ bash_object_id.stdout | default(AZURE_OBJECT_ID) }}"
    upn: "{{ upn_owner | default(bash_upn.stdout) }}"
    tenant_name: "{{ tenant_name | default(bash_tenant_name.stdout) }}"
    base_folder: "{{ base_folder | default('/tf/caf') }}"
    PUBLIC_IP_WHITE_LIST: "{{ [public_ip.stdout] }}"

- debug:
    msg:
      - "{{ regions }}"
      - "{{ customer_name }}"
      - "{{ object_id }}"
      - "{{ upn }}"
      - "{{ base_folder }}"
      - "{{ input_caf_environment if input_caf_environment is defined else TF_VAR_environment }}"


- name: "load {{ template_folder | default(platform_definition_folder)}}/ignite.yaml"
  include_vars:
    name: bootstrap
    dir: "{{ template_folder | default(platform_definition_folder)}}"
    depth: 1
    ignore_unknown_extensions: true
    files_matching: "ignite.yaml"

- set_fact:
    caf_environment: "{{ TF_VAR_environment }}"
  when: TF_VAR_environment is defined
  
- set_fact:
    topology: "{{ lookup('template', '{{ topology_file }}') | from_yaml }}"
    topology_deployment__to_merge: "{{ lookup('template', '{{ topology_file }}') | from_yaml }}"
    destination_path: "{{definition_folder | default(platform_definition_folder)}}"
    resource_template_folder: "{{ public_templates_folder }}/resources"
    platform_service_folder: "{{ public_templates_folder }}/platform/services"
    public_templates_variables_folder: "{{ public_templates_folder }}/variables"

- name: "Creates directory - {{destination_path}}"
  file:
    path: "{{destination_path}}"
    state: directory
       
#
# Load the files into variables
#
- name: "load _variables files"
  include_vars:
    name: variables
    dir: "{{  public_templates_variables_folder}}"
    depth: 1
    ignore_unknown_extensions: true
    files_matching: "_variables"


- debug:
    msg: 
      - "variables: {{variables}}"
      - "topology: {{topology}}"

- include_tasks: "load_regions.yaml"
  loop: "{{topology.deployments[deployment_mode].keys()}}"
  loop_control:
    loop_var: stage

- name: Merge deployment files into topologies variable
  merge_vars:
    suffix_to_merge: _deployment__to_merge
    merged_var_name: merged_topologies
    expected_type: 'dict'
    recursive_dict_merge: True

- name: "Topologies merged"
  set_fact:
    resources:  "{{ merged_topologies }}"

# - debug:
#     msg: "{{resources}}"

# Need topologies to render the following templates
- name: "load tfstates"
  set_fact:
    "tfstates_deployment__to_merge": "{{ lookup('template', '{{platform_service_folder}}/tfstates.yaml') | from_yaml }}"


- name: Merge deployment files into topologies variable
  merge_vars:
    suffix_to_merge: _deployment__to_merge
    merged_var_name: merged_topologies
    expected_type: 'dict'
    recursive_dict_merge: True

- set_fact:
    resources:  "{{ merged_topologies }}"

# - debug:
#     msg: "resources1: {{resources}}"

#
# Generate target folder structure and files
#

- name: Copy files
  include_tasks: "load_regions.yaml"
  loop: "{{topology.deployments[deployment_mode].keys()}}"
  loop_control:
    loop_var: stage

- find:
    paths: "{{public_templates_variables_folder}}"
    recurse: no
    patterns: "_variables*.yaml"
    file_type: file
  register: variable_files_to_process

- name: copy variables files
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{destination_path}}/{{ item.path | basename }}"
  loop: "{{variable_files_to_process.files}}"

# Copy github workflows
- find:
    paths: "{{public_templates_folder}}/pipelines/.github/workflows"
    recurse: yes
    file_type: file
  register: github_workflows_to_process

- name: copy github workflows
  ansible.builtin.template:
    src: "{{ item.path }}"
    dest: "{{base_folder}}/{{ item.path | regex_replace(public_templates_folder + '/pipelines', '') }}"
  loop: "{{github_workflows_to_process.files}}"

# Copy default firewall rules

- name: "Creates destination directory - {{firewall_rules_path}}"
  file:
    path: "{{firewall_rules_path}}/{{item}}"
    state: directory
  with_items:
   - application_rule_collections
   - network_rule_collections
   - nat_rule_collections
    
- find:
    paths: "{{public_templates_folder}}/firewall_rules"
    recurse: yes
    file_type: file
  register: firewall_files_to_process

- name: copy firewall files
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{firewall_rules_path}}/{{ item.path | regex_replace(public_templates_folder + '/firewall_rules', '') }}"
  loop: "{{firewall_files_to_process.files}}"

# Copy platform templates
- find:
    paths: "{{platform_service_folder}}"
    recurse: no
    patterns: "*.yaml"
    file_type: file
  register: platform_service_template_files_to_process

- name: "Creates destination directory - {{topology.private_templates_folder}}"
  file:
    path: "{{topology.private_templates_folder}}"
    state: directory

- name: copy public platform templates
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{topology.private_templates_folder}}/{{ item.path | regex_replace(platform_service_folder, '') }}"
  loop: "{{platform_service_template_files_to_process.files}}"


- name: tfstates.yaml
  ansible.builtin.template:
    src: "{{platform_service_folder}}/tfstates.yaml"
    dest: "{{destination_path}}/tfstates.yaml"
    
- name: ignite.yaml
  ansible.builtin.template:
    src: "{{public_templates_folder}}/platform/caf_platform_prod_nonprod.yaml"
    dest: "{{destination_path}}/ignite.yaml"
        
- name: "{{platform_service_folder}}/README.md"
  ansible.builtin.template:
    src: "{{platform_service_folder}}/README.md"
    dest: "{{destination_path}}/GETTING-STARTED.md"
  