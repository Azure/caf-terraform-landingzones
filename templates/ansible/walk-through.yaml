#
# Get launchpad subscription details
#

# blinQ start:
# Workaround for Graph API Issue https://github.com/microsoftgraph/msgraph-metadata/issues/92
# We require a normal user principal to become Azure AD Group owner for every groups created by template. To avoid template brake the code when it run in different context as user and service principal, this user can't be picked up by logged_in_user. We ask for this input in the walk-through-bootstrap.yaml.
- name: Get Azure AD object_id for default Azure AD Group Owner user principal
  shell: az ad user show --id "{{ default_azure_ad_group_owner }}" | jq -r .id
  register: group_owner_object_id

- debug:
    msg: "Group Owner Object Id: {{ group_owner_object_id.stdout }}"

# We need to add the object_id for platform-landing-zones App to the caf-level0 Azure AD group so it have the required access to keyvaults
# Get object_id for <orgname>-platform-landing-zones app registration, we need to add this object to Azure AD group caf-level0
# THIS DON'T WORK YEAT - MANUAL WORKAROUND INCLUDE TO ADD THE APP TO THE GROUP FROM AZURE PORTAL BEFORE PUSHING THE BOOTSTRAP BRANCH TO GITHUB
- name: Get App {{TF_VAR_environment}}-platform-landing-zones object_id
  shell: az ad app list --query "[].{DisplayName:displayName, id:id} | [? contains(DisplayName,'{{TF_VAR_environment}}-platform-landing-zones')]" | jq -r '.[].id'
  register: app_platform_landing_zones_object_id

- debug:
    msg: "App Platform Landing Zone Object Id: {{ app_platform_landing_zones_object_id.stdout }}"
# blinQ end!

# We use this to not update documentation for manual deployment when running in github worker nodes
- Name: Get Execution mode from Rover environment variable
  shell: echo $gitops_execution_mode
  register: gitops_execution_mode

- name: Get user type logged in with azure
  shell: az account show | jq -r .user.type
  register: az_user_type

- debug: 
    var: az_user_type

- name: Get deployment user object_id when normal user (make sure you are logged-in to the launchpad Azure subscription first.)
  shell: az ad signed-in-user show --query id -o tsv
  register: bash_object_id
  when: az_user_type.stdout == "user" and AZURE_OBJECT_ID is not defined

- debug:
    var: bash_object_id

- name: Get az service-principle id
  shell: az account show | jq -r .user.name
  register: az_sp_id
  when: az_user_type.stdout == "servicePrincipal"

- debug: 
    var: az_sp_id

- name: Get deployment serviceprincipal object id when service principal (make sure you are logged-in to the launchpad Azure subscription first.)
  shell: az ad sp show --id "{{ az_sp_id.stdout }}" --query id --out tsv
  register: bash_object_id_sp
  when: az_user_type.stdout == "servicePrincipal" and AZURE_OBJECT_ID is not defined

- debug:
    var: bash_object_id_sp

- name: Get deployment user UPN
  shell: az ad signed-in-user show --query userPrincipalName -o tsv
  register: bash_upn
  when: az_user_type.stdout == "user" and upn_owner is not defined

- name: Get default user's tenant name
  shell: az rest --method get --url "https://graph.microsoft.com/v1.0/organization" --query "value[0].verifiedDomains[?isDefault].name" -o tsv
  register: bash_tenant_name
  when: tenant_name is not defined
  
- name: Get default user's tenant guid
  shell: az account show --query tenantId -o tsv
  register: tenant_id
  
- name: Get default subscription id
  shell: az account show --query id -o tsv
  register: subscription_id
  
- name: Get default subscription name
  shell: az account show --query name -o tsv
  register: subscription_name
  
- name: Get public ip address for bootstrap whitelisting
  shell: dig @resolver1.opendns.com A myip.opendns.com +short -4
  register: public_ip

- set_fact:
    agent_token_part1: "gh api --method POST -H 'Accept: application/vnd.github.v3+json' /repos/"
    github_org_repo: "{{ GITOPS_SERVER_URL | regex_replace('^https://github.com/', '') }}"
    agent_token_part2: "/actions/runners/registration-token | jq -r ' {value: .token}'"

- debug:
    msg: 
      - "{{ agent_token_part1 }}"
      - "{{ github_org_repo }}"
      - "{{ agent_token_part2 }}"


- set_fact:
    agent_token: "\"{{ agent_token_part1 }}{{ github_org_repo }}{{ agent_token_part2 }}\""

- debug:
    msg:
      - "{{ agent_token }}"

- set_fact:
    object_id: "{{ bash_object_id.stdout }}"
  when: bash_object_id.stdout is defined

- set_fact:
    object_id: "{{ bash_object_id_sp.stdout }}"
  when: object_id is not defined and bash_object_id_sp.stdout is defined

- set_fact:
    upn: "{{ upn_owner | default(bash_upn.stdout) }}"
  when: upn_owner is defined or bash_upn.stdout is defined

- debug:
    msg:
      - "{{ upn | default('UPN not defined')}}"    

- set_fact:
    regions:  "{{ azure_regions }}"
    deployment_mode: "platform"
    tenant_name: "{{ tenant_name | default(bash_tenant_name.stdout) }}"
    base_folder: "{{ base_folder | default('/tf/caf') }}"
    PUBLIC_IP_WHITE_LIST: "{{ [public_ip.stdout] }}"
  
- debug:
    msg:
      - "{{ regions }}"
      - "{{ customer_name }}"
      - "{{ object_id }}"
      - "{{ base_folder }}"
      - "{{ input_caf_environment if input_caf_environment is defined else TF_VAR_environment }}"      

- name: "load {{ template_folder | default(platform_definition_folder)}}/ignite.yaml"
  include_vars:
    name: bootstrap
    dir: "{{ template_folder | default(platform_definition_folder)}}"
    depth: 1
    ignore_unknown_extensions: true
    files_matching: "ignite.yaml"
    
- set_fact:
    caf_environment: "{{ TF_VAR_environment }}"
  when: TF_VAR_environment is defined
  
- set_fact:
    topology: "{{ lookup('template', '{{ topology_file }}') | from_yaml }}"
    topology_deployment__to_merge: "{{ lookup('template', '{{ topology_file }}') | from_yaml }}"
    destination_path: "{{definition_folder | default(platform_definition_folder)}}"
    resource_template_folder: "{{ public_templates_folder }}/resources"
    platform_service_folder: "{{ public_templates_folder }}/platform/services"
    public_templates_variables_folder: "{{ public_templates_folder }}/variables"

- name: "Creates directory - {{destination_path}}"
  file:
    path: "{{destination_path}}"
    state: directory
       
#
# Load the files into variables
#
- name: "load _variables files"
  include_vars:
    name: variables
    dir: "{{  public_templates_variables_folder}}"
    depth: 1
    ignore_unknown_extensions: true
    files_matching: "_variables"


- debug:
    msg: 
      - "variables: {{variables}}"
      - "topology: {{topology}}"

- include_tasks: "load_regions.yaml"
  loop: "{{topology.deployments[deployment_mode].keys()}}"
  loop_control:
    loop_var: stage

- name: Merge deployment files into topologies variable
  merge_vars:
    suffix_to_merge: _deployment__to_merge
    merged_var_name: merged_topologies
    expected_type: 'dict'
    recursive_dict_merge: True

- name: "Topologies merged"
  set_fact:
    resources:  "{{ merged_topologies }}"

# - debug:
#     msg: "{{resources}}"

# Need topologies to render the following templates
- name: "load tfstates"
  set_fact:
    "tfstates_deployment__to_merge": "{{ lookup('template', '{{platform_service_folder}}/tfstates.yaml') | from_yaml }}"


- name: Merge deployment files into topologies variable
  merge_vars:
    suffix_to_merge: _deployment__to_merge
    merged_var_name: merged_topologies
    expected_type: 'dict'
    recursive_dict_merge: True

- set_fact:
    resources:  "{{ merged_topologies }}"

# - debug:
#     msg: "resources1: {{resources}}"

#
# Generate target folder structure and files
#

- name: Copy files
  include_tasks: "load_regions.yaml"
  loop: "{{topology.deployments[deployment_mode].keys()}}"
  loop_control:
    loop_var: stage

- find:
    paths: "{{public_templates_variables_folder}}"
    recurse: no
    patterns: "_variables*.yaml"
    file_type: file
  register: variable_files_to_process

- name: copy variables files
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{destination_path}}/{{ item.path | basename }}"
  loop: "{{variable_files_to_process.files}}"

# Copy github workflows
- find:
    paths: "{{public_templates_folder}}/pipelines/.github/workflows"
    recurse: yes
    file_type: file
  register: github_workflows_to_process

- name: copy github workflows
  ansible.builtin.template:
    src: "{{ item.path }}"
    dest: "{{base_folder}}/{{ item.path | regex_replace(public_templates_folder + '/pipelines', '') | regex_replace('.j2$', '') }}"
  loop: "{{github_workflows_to_process.files}}"

# Copy default firewall rules

- name: "Creates destination directory - {{firewall_rules_path}}"
  file:
    path: "{{firewall_rules_path}}/{{item}}"
    state: directory
  with_items:
   - application_rule_collections
   - network_rule_collections
   - nat_rule_collections
    
- find:
    paths: "{{public_templates_folder}}/firewall_rules"
    recurse: yes
    file_type: file
  register: firewall_files_to_process

- name: copy firewall files
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{firewall_rules_path}}/{{ item.path | regex_replace(public_templates_folder + '/firewall_rules', '') }}"
  loop: "{{firewall_files_to_process.files}}"

# Copy platform templates
- find:
    paths: "{{platform_service_folder}}"
    recurse: no
    patterns: "*.yaml"
    file_type: file
  register: platform_service_template_files_to_process

- name: "Creates destination directory - {{topology.private_templates_folder}}"
  file:
    path: "{{topology.private_templates_folder}}"
    state: directory

- name: copy public platform templates
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{topology.private_templates_folder}}/{{ item.path | regex_replace(platform_service_folder, '') }}"
  loop: "{{platform_service_template_files_to_process.files}}"


- name: tfstates.yaml
  ansible.builtin.template:
    src: "{{platform_service_folder}}/tfstates.yaml"
    dest: "{{destination_path}}/tfstates.yaml"
    
- name: ignite.yaml
  ansible.builtin.template:
    src: "{{public_templates_folder}}/platform/caf_platform_prod_nonprod.yaml"
    dest: "{{destination_path}}/ignite.yaml"
        
- name: "{{platform_service_folder}}/README.md"
  ansible.builtin.template:
    src: "{{platform_service_folder}}/README.md"
    dest: "{{destination_path}}/GETTING-STARTED.md"
  when: gitops_execution_mode.stdout == "local"
  