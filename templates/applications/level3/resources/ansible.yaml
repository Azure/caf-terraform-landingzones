
- name: set destination paths
  set_fact:
    destination_path:  "{{ destination_base_path }}/{{ subscription_key }}/resources"
    deployment: "resources"

- name: "Clean-up directory - subscription - {{ destination_path }}"
  file:
    path: "{{ destination_path }}"
    state: absent
  when: config.configuration_folders.asvm.cleanup_destination  | default(true) | bool

- name: "Load variable for resources"
  include_vars:
    name: resources
    dir: "{{config_folder}}"
    depth: 1
    ignore_unknown_extensions: true
    files_matching: "resources.asvm.yaml"

- name: "Content of resources"
  debug:
    msg: "{{resources}}"

- name: "[{{ level }} {{ asvm_folder }}] - resources - Creates directory"
  file:
    path: "{{ destination_path }}"
    state: directory
#
# azuread_credentials
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - azuread_credentials"
  when: 
    - resources.subscriptions[subscription_key].azuread_credentials is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_credentials.tfvars.j2"

#
# azuread_applications
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - azuread_applications"
  when:
    - resources.subscriptions[subscription_key].azuread_applications is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_applications.tfvars.j2"

#
# azuread_credential_policies
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - azuread_credential_policies"
  when:
    - resources.subscriptions[subscription_key].azuread_credential_policies is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_credential_policies.tfvars.j2"

#
# azuread_groups
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - azuread_groups"
  when:
    - resources.subscriptions[subscription_key].azuread_groups is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_groups.tfvars.j2"

#
# azuread_groups_membership
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - azuread_groups_membership"
  when:
    - resources.subscriptions[subscription_key].azuread_groups_membership is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_groups_membership.tfvars.j2"

#
# azuread_service_principals
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - azuread_service_principals"
  when:
    - resources.subscriptions[subscription_key].azuread_service_principals is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_service_principals.tfvars.j2"

#
# custom_role_definitions
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - custom_role_definitions"
  when:
    - resources.subscriptions[subscription_key].custom_role_definitions is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/custom_role_definitions.tfvars.j2"

#
# keyvaults
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - keyvaults"
  when:
    - resources.subscriptions[subscription_key].keyvaults is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/keyvaults.tfvars.j2"

#
# keyvault_access_policies
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - keyvault_access_policies"
  when:
    - resources.subscriptions[subscription_key].keyvault_access_policies is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/keyvault_access_policies.tfvars.j2"

#
# landingzone
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - landingzone"
  when:
    - deployments.deployments[subscription_key][deployment].landingzone is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/landingzone.tfvars.j2"

#
# managed_identities
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - managed_identities"
  when:
    - resources.subscriptions[subscription_key].managed_identities is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/managed_identities.tfvars.j2"

#
# network_security_group_definition
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - network_security_group_definition"
  when:
    - resources.subscriptions[subscription_key].network_security_group_definition is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/network_security_group_definition.tfvars.j2"

#
# recovery_vaults
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - recovery_vaults"
  when:
    - resources.subscriptions[subscription_key].recovery_vaults is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/recovery_vaults.tfvars.j2"

#
# resource_groups
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - resource_groups"
  when:
    - resources.subscriptions[subscription_key].resource_groups is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/resource_groups.tfvars.j2"

#
# role_mapping
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - role_mapping"
  when:
    - resources.subscriptions[subscription_key].role_mapping is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/role_mapping.tfvars.j2"

#
# virtual_hub_connections
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - virtual_hub_connections"
  when:
    - resources.subscriptions[subscription_key].virtual_hub_connections is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/virtual_hub_connections.tfvars.j2"


#
# virtual_networks
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - virtual_networks"
  when:
    - resources.subscriptions[subscription_key].virtual_networks is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/virtual_networks.tfvars.j2"


#
# Readme
#
- name: "[{{ level }}-{{ subscription_key }}] - resources - *.md"
  when: subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/*.md"
