
keyvaults = {
  level0 = {
    name                      = "{{ resources[tfstate].resources[subscription_key].keyvaults.level0.name }}"
    resource_group_key        = "{{ resources[tfstate].resources[subscription_key].keyvaults.level0.resource_group_key }}"
    sku_name                  = "{{ resources[tfstate].resources[subscription_key].keyvaults.level1.sku_name | default('standard') }}"
{% if resources[tfstate].resources[subscription_key].keyvaults.level2.enable_rbac_authorization is defined %}
    enable_rbac_authorization = {{ resources[tfstate].resources[subscription_key].keyvaults.level0.enable_rbac_authorization | lower }}
{% endif %}
    tags = {
      caf_tfstate     = "level0"
      caf_environment = "{{ bootstrap.caf_environment }}"
    }

    creation_policies = {
      // {{ bootstrap.billing_subscription_role_delegations.azuread_user_ea_account_owner }}
      bootstrap_user = {
        object_id          = "{{ bootstrap.billing_subscription_role_delegations.azuread_user_ea_account_owner_object_id }}"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% if bootstrap.azure_landing_zones.identity.enable_azuread_groups %}
      caf_platform_maintainers = {
        azuread_group_key  = "caf_platform_maintainers"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
      caf_platform_contributors = {
        azuread_group_key  = "caf_platform_contributors"
        secret_permissions = ["Get"]
      }
{% endif %}
{% if bootstrap.azure_landing_zones.identity.azuread_identity_mode == 'logged_in_user' %}
      logged_in_user = {
        # if the key is set to "logged_in_user" add the user running terraform in the keyvault policy
        # More examples in /examples/keyvault
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% endif %}
    }

{% set value = resources[tfstate].resources[subscription_key].keyvaults.level0 %}
{% if value.network is defined %}
    network = {
{% if value['network'].default_action is defined %}
      default_action = "{{ value['network'].default_action }}"
{% endif %}
{% if value['network'].bypass is defined %}
      bypass = "{{ value['network'].bypass }}"
{% endif %}
{% if value['network'].ip_rules is defined %}
      ip_rules = {{ value['network'].ip_rules | replace('None','[]') | replace('\'','\"') }}
{% endif %}
{% if value['network'].subnets is defined %}
      subnets = {
{% for s_key, s_value in value['network'].subnets.items() %}
        {{ s_key }} = {
{% if s_value.remote_subnet_id is defined %}
          remote_subnet_id = "{{ s_value.remote_subnet_id  }}"
{% else %}
{% if s_value.lz_key is defined %}
          lz_key     = "{{ s_value.lz_key }}"
{% endif %}
          vnet_key   = "{{ s_value.vnet_key }}"
          subnet_key = "{{ s_value.subnet_key }}"
{% endif %}
        }
{% endfor %}
      }
{% endif %}
    }
{% endif %}

  }

  level1 = {
    name                      = "{{ resources[tfstate].resources[subscription_key].keyvaults.level1.name }}"
    resource_group_key        = "{{ resources[tfstate].resources[subscription_key].keyvaults.level1.resource_group_key }}"
    sku_name                  = "{{ resources[tfstate].resources[subscription_key].keyvaults.level1.sku_name | default('standard') }}"
{% if resources[tfstate].resources[subscription_key].keyvaults.level2.enable_rbac_authorization is defined %}
    enable_rbac_authorization = {{ resources[tfstate].resources[subscription_key].keyvaults.level1.enable_rbac_authorization | lower }}
{% endif %}
    tags = {
      caf_tfstate     = "level1"
      caf_environment = "{{ bootstrap.caf_environment }}"
    }

    creation_policies = {
      // {{ bootstrap.billing_subscription_role_delegations.azuread_user_ea_account_owner }}
      bootstrap_user = {
        object_id          = "{{ bootstrap.billing_subscription_role_delegations.azuread_user_ea_account_owner_object_id }}"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% if bootstrap.azure_landing_zones.identity.enable_azuread_groups %}
      caf_platform_maintainers = {
        azuread_group_key  = "caf_platform_maintainers"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
      caf_platform_contributors = {
        azuread_group_key  = "caf_platform_contributors"
        secret_permissions = ["Get"]
      }
{% endif %}
{% if bootstrap.azure_landing_zones.identity.azuread_identity_mode == 'logged_in_user' %}
      logged_in_user = {
        # if the key is set to "logged_in_user" add the user running terraform in the keyvault policy
        # More examples in /examples/keyvault
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% endif %}
    }

{% set value = resources[tfstate].resources[subscription_key].keyvaults.level1 %}
{% if value.network is defined %}
    network = {
{% if value['network'].default_action is defined %}
      default_action = "{{ value['network'].default_action }}"
{% endif %}
{% if value['network'].bypass is defined %}
      bypass = "{{ value['network'].bypass }}"
{% endif %}
{% if value['network'].ip_rules is defined %}
      ip_rules = {{ value['network'].ip_rules | replace('None','[]') | replace('\'','\"') }}
{% endif %}
{% if value['network'].subnets is defined %}
      subnets = {
{% for s_key, s_value in value['network'].subnets.items() %}
        {{ s_key }} = {
{% if s_value.remote_subnet_id is defined %}
          remote_subnet_id = "{{ s_value.remote_subnet_id  }}"
{% else %}
{% if s_value.lz_key is defined %}
          lz_key     = "{{ s_value.lz_key }}"
{% endif %}
          vnet_key   = "{{ s_value.vnet_key }}"
          subnet_key = "{{ s_value.subnet_key }}"
{% endif %}
        }
{% endfor %}
      }
{% endif %}
    }
{% endif %}

  }

  level2 = {
    name                      = "{{ resources[tfstate].resources[subscription_key].keyvaults.level2.name }}"
    resource_group_key        = "{{ resources[tfstate].resources[subscription_key].keyvaults.level2.resource_group_key }}"
    sku_name                  = "{{ resources[tfstate].resources[subscription_key].keyvaults.level1.sku_name | default('standard') }}"
{% if resources[tfstate].resources[subscription_key].keyvaults.level2.enable_rbac_authorization is defined %}
    enable_rbac_authorization = {{ resources[tfstate].resources[subscription_key].keyvaults.level2.enable_rbac_authorization | lower }}
{% endif %}
    tags = {
      caf_tfstate     = "level2"
      caf_environment = "{{ bootstrap.caf_environment }}"
    }

    creation_policies = {
      // {{ bootstrap.billing_subscription_role_delegations.azuread_user_ea_account_owner }}
      bootstrap_user = {
        object_id          = "{{ bootstrap.billing_subscription_role_delegations.azuread_user_ea_account_owner_object_id }}"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% if bootstrap.azure_landing_zones.identity.enable_azuread_groups %}
      caf_platform_maintainers = {
        azuread_group_key  = "caf_platform_maintainers"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
      caf_platform_contributors = {
        azuread_group_key  = "caf_platform_contributors"
        secret_permissions = ["Get"]
      }
{% endif %}
{% if bootstrap.azure_landing_zones.identity.azuread_identity_mode == 'logged_in_user' %}
      logged_in_user = {
        # if the key is set to "logged_in_user" add the user running terraform in the keyvault policy
        # More examples in /examples/keyvault
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% endif %}
    }

{% set value = resources[tfstate].resources[subscription_key].keyvaults.level2 %}
{% if value.network is defined %}
    network = {
{% if value['network'].default_action is defined %}
      default_action = "{{ value['network'].default_action }}"
{% endif %}
{% if value['network'].bypass is defined %}
      bypass = "{{ value['network'].bypass }}"
{% endif %}
{% if value['network'].ip_rules is defined %}
      ip_rules = {{ value['network'].ip_rules | replace('None','[]') | replace('\'','\"') }}
{% endif %}
{% if value['network'].subnets is defined %}
      subnets = {
{% for s_key, s_value in value['network'].subnets.items() %}
        {{ s_key }} = {
{% if s_value.remote_subnet_id is defined %}
          remote_subnet_id = "{{ s_value.remote_subnet_id  }}"
{% else %}
{% if s_value.lz_key is defined %}
          lz_key     = "{{ s_value.lz_key }}"
{% endif %}
          vnet_key   = "{{ s_value.vnet_key }}"
          subnet_key = "{{ s_value.subnet_key }}"
{% endif %}
        }
{% endfor %}
      }
{% endif %}
    }
{% endif %}

  }
}
