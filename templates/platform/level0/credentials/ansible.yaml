- name: "[{{ level }}-{{ base_folder }}] - Set variables"
  set_fact:
    destination_path: "{{ destination_base }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}"

- name: "[{{ level }}-{{ base_folder }}] - Load variable for launchpad"
  include_vars:
    name: resources
    dir: "{{config_folder}}"
    depth: 1
    ignore_unknown_extensions: true
    files_matching: "launchpad_credentials.yaml"

- debug:
    msg: "{{resources}}"

- name: "[{{ level }}-{{ base_folder }}] Clean-up directory"
  file:
    path: "{{ destination_base }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}"
    state: absent
  when: config.configuration_folders.platform.cleanup_destination | bool

- name: "[{{ level }}-{{ base_folder }}] Creates directory"
  file:
    path: "{{ destination_base }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}"
    state: directory

#
# resource_groups
#
- name: "[{{ level }}-{{ base_folder }}] - resource_groups"
  when:
    - resources.subscriptions[subscription_key].resource_groups is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/resource_groups.tfvars.j2"
#
# azuread_credentials
#
- name: "[{{ level }}-{{ subscription_key }}] - credentials - azuread_credentials"
  when: 
    - resources.subscriptions[subscription_key].azuread_credentials is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_credentials.tfvars.j2"

#
# azuread_applications
#
- name: "[{{ level }}-{{ subscription_key }}] - credentials - azuread_applications"
  when: 
    - resources.subscriptions[subscription_key].azuread_applications is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_applications.tfvars.j2"

#
# azuread_credential_policies
#
- name: "[{{ level }}-{{ subscription_key }}] - credentials - azuread_credential_policies"
  when: 
    - resources.subscriptions[subscription_key].azuread_credential_policies is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_credential_policies.tfvars.j2"

#
# azuread_service_principals
#
- name: "[{{ level }}-{{ subscription_key }}] - credentials - azuread_service_principals"
  when: 
    - resources.subscriptions[subscription_key].azuread_service_principals is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/azuread_service_principals.tfvars.j2"


#
# keyvaults
#
- name: "[{{ level }}-{{ subscription_key }}] - credentials - keyvaults"
  when: 
    - resources.subscriptions[subscription_key].keyvaults is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/keyvaults.tfvars.j2"

#
# keyvault_access_policies
#
- name: "[{{ level }}-{{ subscription_key }}] - credentials - keyvault_access_policies"
  when: 
    - resources.subscriptions[subscription_key].keyvault_access_policies is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ resource_template_folder }}/keyvault_access_policies.tfvars.j2"


- name: "[{{ level }}-{{ base_folder }}] generate configuration files."
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_base }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ level }}/{{ base_folder }}/*.tfvars.j2"

- name: "[{{ level }}-{{ base_folder }}] deploy."
  when: boostrap_launchpad | bool
  shell: |
    /tf/rover/rover.sh \
      -lz /tf/caf/landingzones/caf_solution \
      -var-folder {{ destination_base }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }} \
      -tfstate_subscription_id {{ config.caf_terraform.launchpad.subscription_id }} \
      -target_subscription {{ config.caf_terraform.launchpad.subscription_id }} \
      -tfstate {{ tfstates.launchpad_credentials.tfstate }} \
      -launchpad \
      -log-severity {{ config.gitops.rover_log_error }} \
      -env {{ config.caf_terraform.launchpad.caf_environment }} \
      -level {{ level }} \
      -a apply
  args:
    warn: no

- debug:
    msg: "{{ keyvaults.cred_subscription_creation_platform.vault_uri }}"
  when: credentials_tfstate_exists.rc == 0

- name: "[{{ level }}-{{ base_folder }}] generate configuration files."
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_base }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ level }}/{{ base_folder }}/*.md"
