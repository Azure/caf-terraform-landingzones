
#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#

name: "Ansible generate configuration files"

on:
  push:
    branches:
      - definition  

env:
  TF_CLI_ARGS: '-no-color'
  TF_REGISTRY_DISCOVERY_RETRY: 5
  TF_REGISTRY_CLIENT_TIMEOUT: 15
  ROVER_RUNNER: true

{% raw %}
jobs:

  environment:
    name: Setup dynamic environment variables
    runs-on: ubuntu-latest
    outputs:
      terraform_code_repository: ${{ steps.set_env.outputs.terraform_code_repository }}
      terraform_code_ref: ${{ steps.set_env.outputs.terraform_code_ref }}
      environment: ${{ steps.set_env.outputs.environment }}
    steps:
      - name: Set environment variables for re-usable workflows
        id: set_env
        run: |
          echo "terraform_code_repository=$LZ_REPO" >> $GITHUB_OUTPUT
          echo "terraform_code_ref=$LZ_BRANCH" >> $GITHUB_OUTPUT
          echo "environment=$CAF_ENVIRONMENT" >> $GITHUB_OUTPUT

  rover:
    name: Generate configuration files
    runs-on: [self-hosted, platform]
    needs: [environment]

    steps:
       
      - name: Checkout Configuration
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: definition

      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_MANAGEMENT_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Ansible playbook generate configuration files from definition files
        run: |
          rm -rf ./landingzones
          git clone -b ${{ needs.environment.terraform_code_ref }} --single-branch ${{ needs.environment.terraform_code_repository }} ./landingzones
          
          cred_vault_name=$(az keyvault list --query "[?(tags.caf_identity_aad_key=='cred_level0' && tags.caf_environment=='${{ needs.environment.environment }}')].{name:name}[0]" -o tsv)
          if [ "${cred_vault_name}" != ''  ]; then
            sp_keyvault_url="https://${cred_vault_name}.vault.azure.net/"
            
            # Test permissions
            az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-client-id --query 'value' -o tsv  --only-show-errors | read CLIENT_ID

            if [ ! -z "${tenant}" ]; then
                export ARM_TENANT_ID=${tenant}
            else
                export ARM_TENANT_ID=$(az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-tenant-id --query 'value' -o tsv --only-show-errors)
            fi

            export ARM_CLIENT_ID=$(az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-client-id --query 'value' -o tsv --only-show-errors)
            export ARM_CLIENT_SECRET=$(az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-client-secret --query 'value' -o tsv --only-show-errors)

            az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} -t ${ARM_TENANT_ID}  --only-show-errors 1> /dev/null
          fi

          ansible-playbook $(readlink -f ./landingzones/templates/ansible/ansible.yaml) \
            --extra-vars "@$(readlink -f ./platform/definition/ignite.yaml)" \
            -e RUNNER_NUMBERS=${{ secrets.RUNNER_NUMBERS }} \
            -e AZURE_OBJECT_ID=${{ secrets.AZURE_OBJECT_ID }} \
            -e GITHUB_SERVER_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY} \
            -e base_folder=$(pwd)

      - name: Update Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.BOOTSTRAP_TOKEN }}
          commit-message: "Update configuration files"
          committer: "Github Action Bot <github-actions@github.com>"
          branch: configuration
          base: main
          delete-branch: true
          title: "Configuration files updated, update pull_request to merge with main"
          body: "${body}"
          assignees: "@me"
{% endraw %}
        
