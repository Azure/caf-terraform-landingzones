# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


variables:
  azureSubscription: MSDN_nicolasyuen
  deploymentEnabled: true
  destroyEnabled: true
  landingZoneName: "landingzone_caf_foundations"
  environment: "MSDN_nicolasyuen"

resources:
  containers:
  - container: rover
    image: aztfmod/rover:2001.1110
    options: --user 0:0 -v /tmp:/tmp -e TF_PLUGIN_CACHE_DIR="/tmp/tf-plugin-cache" #temporary workaround as the user needs USERADD rights

stages:
- stage: Rover
  displayName: "Validating Terraform Code"
  jobs:
  - job: Validation
    pool:
      vmImage: 'ubuntu-latest'
    container: rover
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{variables.azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Validating landing zone TF files"
            export TF_DATA_DIR="$(System.DefaultWorkingDirectory)" 
            /tf/rover/launchpad.sh $(System.DefaultWorkingDirectory)/$(landingZoneName) validate
      displayName: 'Rover validation'

- stage: Plan
  displayName: "Terraform Plan"
  jobs:
  - job: Plan
    pool: 
      vmImage: 'ubuntu-latest'
    container: rover
    steps:
    - task: AzureCLI@2
      enabled: ${{variables.deploymentEnabled}}
      condition: succeeded()
      inputs:
        azureSubscription: ${{variables.azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Planning landing zone deployment"
            export TF_DATA_DIR="$(System.DefaultWorkingDirectory)" 
            /tf/rover/launchpad.sh $(Build.SourcesDirectory)/$(landingZoneName) plan -var-file="$(Build.SourcesDirectory)/test/$(landingZoneName)/$(landingZoneName).test.tfvars" -input=false -no-color
      displayName: 'Landing Zone Plan'

- stage: Apply
  displayName: "Terraform Apply"
  jobs:
  - job: Apply
    pool: 
      vmImage: 'ubuntu-latest'
    container: rover
    steps:
    - task: AzureCLI@2
      enabled: ${{variables.deploymentEnabled}}
      condition: succeeded()
      inputs:
        azureSubscription: ${{variables.azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Planning landing zone deployment"
            export TF_DATA_DIR="$(System.DefaultWorkingDirectory)"
            /tf/rover/launchpad.sh $(Build.SourcesDirectory)/$(landingZoneName) apply -var-file="$(Build.SourcesDirectory)/test/$(landingZoneName)/$(landingZoneName).test.tfvars" -input=false  -no-color
      displayName: 'Landing Zone Plan'

- stage: Test
  displayName: "Unit Tests"
  jobs:
  - job: UnitTest
    pool: 
      vmImage: 'ubuntu-latest'
    container: rover
    steps:
    - task: AzureCLI@2
      enabled: ${{variables.deploymentEnabled}}
      condition: succeeded()
      inputs:
        azureSubscription: ${{variables.azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Installing BATS"
            git clone https://github.com/sstephenson/bats.git /tmp/bats
            sudo /tmp/bats/install.sh /usr/local
            curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
            sudo yum -y install nodejs
            sudo npm install tap-xunit -g
        displayName: 'Install Bats and Node'
    - task: AzureCLI@2
      enabled: ${{variables.deploymentEnabled}}
      condition: succeeded()
      inputs:
        azureSubscription: ${{variables.azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Running integration Tests"
            export TF_DATA_DIR="$(System.DefaultWorkingDirectory)"
            bats $(Build.SourcesDirectory)/test/$(landingZoneName)/$(landingZoneName).bats | taps-xunit > $(Build.StagingDirectory)/TEST-$(landingZoneName).xml
      displayName: 'Landing Zone integration tests'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'xUnit'
        testResultsFiles: '**/TEST-*.xml' 
        searchFolder: '$(Build.StagingDirectory)' # Optional
        failTaskOnFailedTests: false # Optional
        testRunTitle: "Integration Test"

- stage: Destroy
  displayName: "Terraform Destroy"
  condition: and(or(succeeded(), failed()), eq(variables['destroyEnabled'], true))
  jobs:
  - job: Destroy
    pool: 
      vmImage: 'ubuntu-latest'
    container: rover
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{variables.azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Applying landing zone deployment"
            export TF_DATA_DIR="$(System.DefaultWorkingDirectory)" 
            /tf/rover/launchpad.sh $(Build.SourcesDirectory)/$(landingZoneName) destroy -auto-approve -no-color
      displayName: 'Landing Zone Destroy'
    - task: AzureCLI@2 #TODO <-- LEVERAGE the Azure Resource Graph to confirm, an option is to add the query / script alongside some test variable files to make it more generic"
      inputs:
        azureSubscription: ${{variables.azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Validating resources on Azure have been deleted" 
      displayName: 'Azure resources deletion validation'
