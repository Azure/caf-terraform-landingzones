# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- azuredevops_pipeline

variables:
  azureSubscription: MSDN_nicolasyuen
  deploymentEnabled: false
  destroyEnabled: true
  landingZoneName: "landingzone_caf_foundations"

resources:
  containers:
  - container: rover
    image: aztfmod/rover:2001.0622
    options: --user 0:0 #temporary workaround as the user needs USERADD rights

pool:
  vmImage: 'ubuntu-latest'

container: rover

stages:
- stage: Validation
  displayName: "Validating Terraform Code"
  jobs:
  - job: Validation
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Validating landing zone TF files"
            /tf/rover/launchpad.sh $(Build.SourcesDirectory)/${landingZoneName}s validate
      displayName: 'Rover validation'

- stage: Plan
  displayName: "Terraform Plan"
  jobs:
  - job: Plan
    steps:
    - task: AzureCLI@2
      enabled: ${deploymentEnabled}
      condition: succeeded()
      inputs:
        azureSubscription: ${{azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Planning landing zone deployment"
            /tf/rover/launchpad.sh $(Build.SourcesDirectory)/${landingZoneName} plan
      displayName: 'Landing Zone Plan'

- stage: Apply
  displayName: "Terraform Plan"
  condition: and(succeeded(), ${deployementEnabled})
  jobs:
  - job: Apply
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Applying landing zone deployment"
            /tf/rover/launchpad.sh $(Build.SourcesDirectory)/${landingZoneName} apply
      displayName: 'Landing Zone Apply'
    - task: AzureCLI@2 #TODO <-- LEVERAGE the Azure Resource Graph to confirm, an option is to add the query / script alongside some test variable files to make it more generic"
      inputs:
        azureSubscription: ${{azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Validating resources on Azure" 
      displayName: 'Azure resources validation'

- stage: Destroy
  displayName: "Terraform Plan"
  condition: and(or(succeeded(), failed()), ${destroytEnabled})
  jobs:
  - job: Destroy
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Applying landing zone deployment"
            /tf/rover/launchpad.sh $(Build.SourcesDirectory)/${landingZoneName} apply
      displayName: 'Landing Zone Apply'
    - task: AzureCLI@2 #TODO <-- LEVERAGE the Azure Resource Graph to confirm, an option is to add the query / script alongside some test variable files to make it more generic"
      inputs:
        azureSubscription: ${{azureSubscription}}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            echo "Validating resources on Azure have been deleted" 
      displayName: 'Azure resources deletion validation'
